# Name: Robin Shindelman
# OSU Email: shindelr@oregonstate.edu
# Course: CS261 - Data Structures
# Assignment: 1
# Due Date: 10/13/2023
# Description: This script contains an assortment of functions designed to
# manipulate arrays specifically generated by static_array.py. The user will
# find functions with capabilities such as min/max, mode, sort, and duplicate
# removal.


import random
from typing import Tuple

from static_array import *


# ------------------- PROBLEM 1 - MIN_MAX -----------------------------------

def min_max(arr: StaticArray) -> tuple[int, int]:
    """
    Find the minimum and maximum values of an array.
    arr: A StaticArray object
    return: tuple[int, int]
    """
    min, max = int(), int()

    # Case of the lone ranger
    if arr.length() == 1:
        min, max = arr[0], arr[0]
        return min, max

    for i in range(arr.length() - 1):
        # Take one number in each hand
        num, num_next = arr[i], arr[i + 1]
        # Compare
        if i == 0:
            # Place larger in max, smaller in min.
            if num >= num_next:
                max, min = num, num_next
            else:
                min, max = num, num_next
        else:
            # Compare nums
            if num > max:
                max = num
            if num < min:
                min = num
            if num_next > max:
                max = num_next
            if num_next < min:
                min = num_next
        # Repeat.
    return min, max


# ------------------- PROBLEM 2 - FIZZ_BUZZ ---------------------------------

def fizz_buzz(arr: StaticArray) -> StaticArray:
    """
    Replace specific elements in a StaticArray based on their divisibility.
    Those divisible by three will become 'fizz', divisible by five will become
    'buzz'. If both, the elements will become 'fizzbuzz'. If neither, no
    change will occur.
    arr: array generate by StaticArray
    returns: New 'fizzbuzz' array
    """
    fizz_array = StaticArray(arr.length())
    for i in range(arr.length()):
        # Short circuit with double check first
        if arr[i] % 3 == 0 and arr[i] % 5 == 0:
            fizz_array[i] = 'fizzbuzz'
        # Divisible by 3?
        elif arr[i] % 3 == 0:
            fizz_array[i] = 'fizz'
        # Divisible by 5?
        elif arr[i] % 5 == 0:
            fizz_array[i] = 'buzz'
        # Neither, stays the same
        else:
            fizz_array[i] = arr[i]
    return fizz_array


# ------------------- PROBLEM 3 - REVERSE -----------------------------------

def reverse(arr: StaticArray) -> None:
    """
    Reverse the order of the given array in place.
    arr: Array generated by StaticArray
    returns: None
    """
    place_holder = 0
    # Stop at the middle index minus 1
    for i in range(arr.length() - 1, (arr.length() // 2) - 1, -1):
        # Swap places.
        arr[i], arr[place_holder] = arr[place_holder], arr[i]
        place_holder += 1


# ------------------- PROBLEM 4 - ROTATE ------------------------------------

def rotate(arr: StaticArray, steps: int) -> StaticArray:
    """
    Rotate the positions of the given array by the number of steps indicated
    by the steps parameter.
    arr: Array generated by StaticArray
    steps: The number of indices to shift a value in arr. Positive steps
            rotate the element to the right, negative to the left.
    returns: arr -> StaticArray object rotated by the number of steps.
    """
    # Initialize new array
    array_size = arr.length()
    rotated_array = StaticArray(array_size)
    # If steps are not neg, no need for abs() call.
    if steps > 0:
        for i in range(array_size):
            # Modulo by array length to get proper index.
            rotated_array[(i+steps) % array_size] = arr[i]
    else:
        for i in range(array_size):
            rotated_array[abs((i+steps) % array_size)] = arr[i]
    return rotated_array


# ------------------- PROBLEM 5 - SA_RANGE ----------------------------------

def sa_range(start: int, end: int) -> StaticArray:
    """
    Create a StaticArray generated array containing all the integers between
    the given parameters, start and end.
    start: The first integer of the array.
    end: The last integer of the array.
    returns: array of integers.
    """
    # Create an empty array the size of the end-start
    range_array = StaticArray(abs((end - start)) + 1)
    counter = 0
    if start > end:
        for i in range(start, end - 1, -1):
            range_array[counter] = i
            counter += 1
    else:
        for i in range(start, end + 1):
            range_array[counter] = i
            counter += 1
    return range_array


# ------------------- PROBLEM 6 - IS_SORTED ---------------------------------

def is_sorted(arr: StaticArray) -> int:
    """
    Check the given array to see if it is in a sorted order of any kind.
    arr: StaticArray object
    returns: 1 if ascending order, -1 if descending order, 0 otherwise
    """
    # if size==1, return 1
    array_size = arr.length()
    if array_size == 1:
        return 1

    # Initialize start, end, index
    start, end, index = arr[0], arr[array_size - 1], 0

    # if second element is between first & last, continue.
    if start >= arr[1] <= end or start <= arr[1] >= end:
        return 0

    # Ascending order check
    if start < end:
        while index != array_size - 1:
            if arr[index] < arr[index + 1]:
                index += 1
            else:
                return 0
        return 1
    # Descending order check
    if start > end:
        while index != array_size - 1:
            if arr[index] > arr[index + 1]:
                index += 1
            else:
                return 0
        return -1


# ------------------- PROBLEM 7 - FIND_MODE -----------------------------------

def find_mode(arr: StaticArray) -> tuple[object, int]:
    """
    Find the mode of the given array. The mode is the most commonly occurring
    element. Also tells the user how many times the mode appears. **Note: If
    there is more than one mode, the first to appear will be returned.
    arr: StaticArray object, an array of elements. Must be sorted.
    returns: Tuple of (element, number of occurrences)
    """
    array_size = arr.length()
    # Base cases
    if array_size == 1:
        return arr[0], 1
    if array_size == 2 and arr[0] == arr[1]:
        return arr[0], 2

    # First two elements the same?
    if arr[0] == arr[1]:
        first_elem, first_elem_counter = arr[0], 2
        next_elem, next_elem_counter = 0, 0
    else:
        first_elem, first_elem_counter = arr[0], 1
        next_elem, next_elem_counter = arr[1], 1

    index = 1
    while index != array_size - 1:
        third_elem = arr[index+1]
        if third_elem == first_elem:
            first_elem_counter += 1
        if third_elem == next_elem:
            next_elem_counter += 1

        # If next is not next-next, reset the next counter.
        if first_elem_counter >= next_elem_counter and third_elem != next_elem:
            next_elem, next_elem_counter = third_elem, 1
        # Otherwise don't reset next_counter, just move it forward.
        elif first_elem_counter >= next_elem_counter:
            next_elem = third_elem
        # Or do the swap if next_counter is greater.
        else:
            first_elem, first_elem_counter = next_elem, next_elem_counter
            next_elem, next_elem_counter = third_elem, 1
        index += 1

    return first_elem, first_elem_counter

# ------------------- PROBLEM 8 - REMOVE_DUPLICATES -------------------------


def remove_duplicates(arr: StaticArray) -> StaticArray:
    """
    Delete all duplicate elements in the given array. Hones the array
    down to a "set" of unique elements.
    arr: A StaticArray object.
    returns: A new StaticArray object containing only unique values.
    """
    array_size = arr.length()
    unique_array = StaticArray(array_size)
    # Base case
    if array_size == 1:
        unique_array[0] = arr[0]
        return unique_array

    unique_elem_count = 1
    unique_array[0] = arr[0]
    # Find the unique elements and exactly how many there are.
    for i in range(array_size-1):
        current, next = arr[i], arr[i+1]
        if current != next:
            unique_array[i + 1] = next
            unique_elem_count += 1

    final_array = StaticArray(unique_elem_count)
    none_count = 0
    # Place the unique elements in their proper index in final array.
    for i in range(unique_array.length()):
        current = unique_array[i]
        if current is not None:
            final_array[i - none_count] = current
        else:
            none_count += 1

    return final_array


# ------------------- PROBLEM 9 - COUNT_SORT --------------------------------

def count_sort(arr: StaticArray) -> StaticArray:
    """
    Sort the passed array into descending order specifically using the
    count-sort algorithm.
    arr: A StaticArray object, array of elements
    returns: New StaticArray array sorted in descending order.
    """
    array_size = arr.length()
    start_end: tuple[int, int] = min_max(arr)

    min_max_difference = start_end[1] - start_end[0]
    count_array = StaticArray(min_max_difference + 1)

    # Set all elements equal to zero in count_array
    for i in range(count_array.length()):
        count_array[i] = 0

    # Tabulate element occurrences.
    # if negs and positives in same array use max or min number as offset.
    if start_end[0] < 0 < start_end[1]:
        for i in range(array_size):
            count_array[arr[i]+start_end[1]] += 1
    else:
        for i in range(array_size):
            count_array[abs(start_end[0] - arr[i])] += 1

    # Determine starting indices
    for i in range(count_array.length()-1):
        count_array[i+1] += count_array[i]

    # Place them back into sorted_arr at the appropriate index
    sorted_arr = StaticArray(array_size)

    # If positives and negative nums, use max elem as offset.
    if start_end[0] < 0 < start_end[1]:
        for i in range(array_size):
            sorted_arr[count_array[arr[i]+start_end[1]]-1] = arr[i]
            count_array[arr[i]+start_end[1]] -= 1
    else:
        for i in range(array_size):
            sorted_arr[count_array[abs(start_end[0] - arr[i])]-1] = arr[i]
            count_array[abs(start_end[0] - arr[i])] -= 1

    # Sort into descending order
    reverse(sorted_arr)
    return sorted_arr

# ------------------- PROBLEM 10 - SORTED SQUARES ---------------------------


def sorted_squares(arr: StaticArray) -> StaticArray:
    """
    Square each element in the given array. Array must be sorted into some
    order.
    arr: StaticArray object, array of elements.
    returns: New StaticArray array, sorted into ascending order.
    """
    arr_size = arr.length()
    squared_unsorted = StaticArray(arr_size)
    squared_sorted = StaticArray(arr_size)

    # Square all values, leaves unsorted array if negs are present.
    for i in range(arr_size):
        squared_unsorted[i] = (arr[i])**2

    # Short circuit the function if sorted already:
    if is_sorted(squared_unsorted) == 1:
        return squared_unsorted

    # Set up the while loop, counting down.
    index = arr_size - 1
    left_hand = 0
    right_hand = arr_size - 1
    while index >= 0:
        # If left hand is bigger, place it in the sorted array.
        # Store right hand for the next go around the loop.
        if squared_unsorted[left_hand] > squared_unsorted[right_hand]:
            squared_sorted[index] = squared_unsorted[left_hand]
            left_hand += 1
        # Else, vice versa.
        else:
            squared_sorted[index] = squared_unsorted[right_hand]
            right_hand -= 1
        # Decrement index until all values have been compared.
        index -= 1

    return squared_sorted


# ------------------- BASIC TESTING -----------------------------------------

if __name__ == "__main__":

    print('\n# min_max example 1')
    arr = StaticArray(5)
    for i, value in enumerate([7, 8, 6, -5, 4]):
        arr[i] = value
    print(arr)
    result = min_max(arr)
    if result:
        print(f"Min: {result[0]: 3}, Max: {result[1]}")
    else:
        print("min_max() not yet implemented")

    print('\n# min_max example 2')
    arr = StaticArray(1)
    arr[0] = 100
    print(arr)
    result = min_max(arr)
    if result:
        print(f"Min: {result[0]}, Max: {result[1]}")
    else:
        print("min_max() not yet implemented")

    print('\n# min_max example 3')
    test_cases = (
        [3, 3, 3],
        [-10, -30, -5, 0, -10],
        [25, 50, 0, 10],
    )
    for case in test_cases:
        arr = StaticArray(len(case))
        for i, value in enumerate(case):
            arr[i] = value
        print(arr)
        result = min_max(arr)
        if result:
            print(f"Min: {result[0]: 3}, Max: {result[1]}")
        else:
            print("min_max() not yet implemented")

    print('\n# fizz_buzz example 1')
    source = [_ for _ in range(-5, 20, 4)]
    arr = StaticArray(len(source))
    for i, value in enumerate(source):
        arr[i] = value
    print(fizz_buzz(arr))
    print(arr)

    print('\n# reverse example 1')
    source = [_ for _ in range(-20, -12, 7)]
    arr = StaticArray(len(source))
    for i, value in enumerate(source):
        arr.set(i, value)
    print(arr)
    reverse(arr)
    print(arr)
    reverse(arr)
    print(arr)

    print('\n# rotate example 1')
    source = [_ for _ in range(-20, 20, 7)]
    arr = StaticArray(len(source))
    for i, value in enumerate(source):
        arr.set(i, value)
    print(arr)
    for steps in [1, 2, 0, -1, -2, 28, -100, 2 ** 28, -2 ** 31]:
        space = " " if steps >= 0 else ""
        print(f"{rotate(arr, steps)} {space}{steps}")
    print(arr)

    print('\n# rotate example 2')
    array_size = 1_000_000
    source = [random.randint(-10 ** 9, 10 ** 9) for _ in range(array_size)]
    arr = StaticArray(len(source))
    for i, value in enumerate(source):
        arr[i] = value
    print(f'Started rotating large array of {array_size} elements')
    rotate(arr, 3 ** 14)
    rotate(arr, -3 ** 15)
    print(f'Finished rotating large array of {array_size} elements')

    print('\n# sa_range example 1')
    cases = [(29600, 29592), (10, 0),
             (1, 3), (-1, 2), (0, 0), (0, -10),
             (-95, -89), (-89, -95)]
    for start, end in cases:
        print(f"Start: {start: 4}, End: {end: 4}, {sa_range(start, end)}")

    print('\n# is_sorted example 1')
    test_cases = (
        [-100, -8, 0, 2, 3, 10, 20, 100],
        ['A', 'B', 'Z', 'a', 'z'],
        ['Z', 'T', 'K', 'A', '5'],
        [1, 3, -10, 20, -30, 0],
        [-10, 0, 0, 10, 20, 30],
        [100, 90, 0, -90, -200],
        ['apple']
    )
    for case in test_cases:
        arr = StaticArray(len(case))
        for i, value in enumerate(case):
            arr[i] = value
        result = is_sorted(arr)
        space = "  " if result and result >= 0 else " "
        print(f"Result:{space}{result}, {arr}")

    print('\n# find_mode example 1')
    test_cases = (
        [566, 539, 481, 360, 4, 4, -168, -315, -419, -419, -419, -597],
        [614, 580, 580, 346, 346, 346, 341, 109, 62, 8, -196],
        [1, 20, 30, 40, 500, 500, 500],
        [2, 2, 2, 2, 1, 1, 1, 1],
        ["zebra", "sloth", "otter", "otter", "moose", "koala"],
        ["Albania", "Belgium", "Chile", "Denmark", "Egypt", "Fiji"]
    )
    for case in test_cases:
        arr = StaticArray(len(case))
        for i, value in enumerate(case):
            arr[i] = value

        result = find_mode(arr)
        if result:
            print(f"{arr}\nMode: {result[0]}, Frequency: {result[1]}\n")
        else:
            print("find_mode() not yet implemented\n")

    print('# remove_duplicates example 1')
    test_cases = (
        [1], [1, 2], [1, 1, 2], [1, 20, 30, 40, 500, 500, 500],
        [5, 5, 5, 4, 4, 3, 2, 1, 1], [1, 1, 1, 1, 2, 2, 2, 2]
    )
    for case in test_cases:
        arr = StaticArray(len(case))
        for i, value in enumerate(case):
            arr[i] = value
        print(arr)
        print(remove_duplicates(arr))
    print(arr)

    print('\n# count_sort example 1')
    test_cases = (
        [-3, -2, -1, 0, 1, 2, 3], [10100, 10721, 10320, 10998],
        [1, 2, 4, 3, 5], [5, 4, 3, 2, 1],
        [1, 2, 3, 4, 3, 2, 1, 5, 5, 2, 3, 1], [0, -5, -3, -4, -2, -1, 0],
        [-100320, -100450, -100999, -100001],
    )
    for case in test_cases:
        arr = StaticArray(len(case))
        for i, value in enumerate(case):
            arr[i] = value
        before = arr if len(case) < 50 else 'Started sorting large array'
        print(f"Before: {before}")
        result = count_sort(arr)
        after = result if len(case) < 50 else 'Finished sorting large array'
        print(f"After : {after}")

    print('\n# count_sort example 2')
    array_size = 5_000_000
    min_val = random.randint(-1_000_000_000, 1_000_000_000 - 998)
    max_val = min_val + 998
    case = [random.randint(min_val, max_val) for _ in range(array_size)]
    arr = StaticArray(len(case))
    for i, value in enumerate(case):
        arr[i] = value
    print(f'Started sorting large array of {array_size} elements')
    result = count_sort(arr)
    print(f'Finished sorting large array of {array_size} elements')


    print('\n# sorted_squares example 1')
    test_cases = (
        [-3, -2, -2, 0, 1, 2, 3],
        [1, 2, 3, 4, 5],
        [-5, -4, -3, -2, -1, 0],
    )
    for case in test_cases:
        arr = StaticArray(len(case))
        for i, value in enumerate(sorted(case)):
            arr[i] = value
        print(arr)
        result = sorted_squares(arr)
        print(result)

    print('\n# sorted_squares example 2')
    array_size = 5_000_000
    case = [random.randint(-10 ** 9, 10 ** 9) for _ in range(array_size)]
    arr = StaticArray(len(case))
    for i, value in enumerate(sorted(case)):
        arr[i] = value
    print(f'Started sorting large array of {array_size} elements')
    result = sorted_squares(arr)
    print(f'Finished sorting large array of {array_size} elements')
